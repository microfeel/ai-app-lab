plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id "com.google.devtools.ksp"
}

//获取short版本的 git commit id
static def getGitRevision(File projectDir) {
    return "git rev-parse --short HEAD".execute(null, projectDir).text.trim()
}

def localProperties = new Properties()
File localFile = new File(rootProject.rootDir, "local.properties")
if (localFile.exists()) {
    localProperties.load(new FileInputStream(localFile))
}
println(localProperties)

def appVersionCode = 1000
appVersionCode = localProperties.getProperty('version_code', appVersionCode.toString()).toInteger()

def appVersionName = '1.0.0'
appVersionName = localProperties.getProperty('version_name', appVersionName)

android {
    compileSdkVersion 34

    def channel = "stable"
    channel = localProperties.getProperty('channel', 'stable')

    defaultConfig {
        applicationId "com.example.valcengine.copilot"
        minSdkVersion 24
        targetSdkVersion 33
        //支持动态修改版本号 ./gradlew assemble -PVERSION_CODE=99 -PVERSION_NAME=8.8.8
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField("int", "VERSION_CODE", "${appVersionCode}")
        buildConfigField("String", "VERSION_NAME", "\"${appVersionName}\"")
        buildConfigField("String", "CHANNEL", "\"${channel}\"")

        //修改apk文件命名
        archivesBaseName = "volcengine-copilot-$versionCode-${getGitRevision(project.projectDir)}"
    }

    signingConfigs {
        release {
            keyAlias 'multimodal'
            keyPassword 'multimodal'
            storeFile file('multimodal.jks')
            storePassword 'multimodal'
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters  'x86_64', 'arm64-v8a'
            }
            manifestPlaceholders = [networkSecurityConfig: "@xml/network_security_config"]
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters  'arm64-v8a'
            }
            manifestPlaceholders = [networkSecurityConfig: "@null"]
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        pickFirst 'lib/*/libc++_shared.so'
    }

    buildFeatures {
        viewBinding true
    }

    flavorDimensions "env"
    productFlavors {
        external {
            dimension "env"
            // This is the default flavor if no other is specified during build
        }
        internal {
            dimension "env"
            // You can add specific configurations for the internal flavor here
            // For example, different application ID suffix, version name suffix, etc.
            // applicationIdSuffix ".internal"
            // versionNameSuffix "-internal"
        }
    }
}

dependencies {
    def multimodalKitDir = localProperties.getProperty("mmk.module")
    if (multimodalKitDir != "" && multimodalKitDir != null) {
        //公共模块
        implementation project(":multi-modal-kit:common")

        //ASR能力
        implementation project(":multi-modal-kit:asr:asr-api")
        implementation project(":multi-modal-kit:asr:asr-volcengine-impl")

        //TTS能力
        implementation project(":multi-modal-kit:tts:tts-api")
        implementation project(":multi-modal-kit:tts:tts-volcengine-impl")

        //图片识别能力
        implementation project(":multi-modal-kit:objectdetect:objectdetect-api")
        implementation project(":multi-modal-kit:objectdetect:objectdetect-rtdetr-impl")

        //图片分割能力
        implementation project(":multi-modal-kit:segmentation:segmentation-api")
        implementation project(":multi-modal-kit:segmentation:segmentation-mobilesam-impl")
        //图片处理算法
        implementation project(":multi-modal-kit:algorithm:algorithm-api")
        implementation project(":multi-modal-kit:algorithm:algorithm-impl-tob")
        //加载onnx格式模型文件依赖
        implementation project(":multi-modal-kit:inference-onnx-impl")
        //访问大模型能力
        implementation project(":multi-modal-kit:vlm:vlm-api")
        implementation project(":multi-modal-kit:vlm:vlm-ark-impl")
        //和大模型实时语音通话能力
        implementation project(":multi-modal-kit:visual-realtime:visual-realtime-api")
        implementation project(":multi-modal-kit:visual-realtime:visual-realtime-local")
        //前端通过JSB调用原子能力
        //webview使用JSB依赖项
        implementation project(":multi-modal-kit:bridge:web-bridge")
        //tts能力对应JSB
        implementation project(":multi-modal-kit:tts:tts-bridge")
        //asr能力对应JSB
        implementation project(":multi-modal-kit:asr:asr-bridge")
        //大模型交互JSB
        implementation project(":multi-modal-kit:vlm:vlm-bridge")
        //图片能力JSB
        implementation project(":multi-modal-kit:visual-image")
        implementation project(":multi-modal-kit:visual-bridge")
    } else {
        def multimodalKitVersion = "1.0.0-rc.5"

        //公共模块
        implementation "com.bytedance.ai:multimodalkit-common-tob:${multimodalKitVersion}"

        //ASR能力
        implementation "com.bytedance.ai:multimodalkit-asr-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-asr-volcano-tob:${multimodalKitVersion}"

        //TTS能力
        implementation "com.bytedance.ai:multimodalkit-tts-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-tts-volcano-tob:${multimodalKitVersion}"

        //图片识别能力
        implementation "com.bytedance.ai:multimodalkit-object-detect-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-object-detect-rtdetr-tob:${multimodalKitVersion}"

        //图片分割能力
        implementation "com.bytedance.ai:multimodalkit-segmentation-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-segmentation-common-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-segmentation-mobilesam-tob:${multimodalKitVersion}"

        //图片处理算法
        implementation "com.bytedance.ai:multimodalkit-algorithm-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-algorithm-opencv-tob:${multimodalKitVersion}"

        //加载onnx格式模型文件依赖
        implementation "com.bytedance.ai:multimodalkit-inference-onnx-tob:${multimodalKitVersion}"

        //访问大模型能力
        implementation "com.bytedance.ai:multimodalkit-vlm-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-vlm-ark-tob:${multimodalKitVersion}"

        //和大模型实时通话能力
        implementation "com.bytedance.ai:multimodalkit-visual-realtime-api-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-visual-realtime-local-tob:${multimodalKitVersion}"

        //前端通过JSB调用原子能力
        //webview使用JSB依赖项
        implementation "com.bytedance.ai:multimodalkit-web-bridge-tob:${multimodalKitVersion}"
        //tts能力对应JSB
        implementation "com.bytedance.ai:multimodalkit-tts-bridge-tob:${multimodalKitVersion}"
        //asr能力对应JSB
        implementation "com.bytedance.ai:multimodalkit-asr-bridge-tob:${multimodalKitVersion}"
        //大模型交互JSB
        implementation "com.bytedance.ai:multimodalkit-vlm-bridge-tob:${multimodalKitVersion}"
        //图片能力JSB
        implementation "com.bytedance.ai:multimodalkit-visual-image-tob:${multimodalKitVersion}"
        implementation "com.bytedance.ai:multimodalkit-visual-bridge-tob:${multimodalKitVersion}"
    }
    implementation "com.bytedance.ai:applet-bridge-tob:1.0.0-rc.2"
    //endregion

    //camera
    def camerax_version = "1.3.4"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation 'androidx.exifinterface:exifinterface:1.3.7'
    implementation 'com.google.android.material:material:1.12.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0"
    implementation "androidx.fragment:fragment-ktx:1.1.0"

    //other
    implementation "com.github.getActivity:XXPermissions:18.63"
    implementation 'com.geyifeng.immersionbar:immersionbar:3.2.2'
}
